import * as fs from "fs";
import * as os from "os";
import {bindNodeCallback} from "rxjs/internal/observable/bindNodeCallback";
import {Stats} from "fs";
import {forkJoin} from "rxjs/internal/observable/forkJoin";
import {map} from "rxjs/operators";
import {find, sortBy} from "lodash"

const readdirObservable = bindNodeCallback(fs.readdir);
const lstatObservable = bindNodeCallback(fs.lstat);
const writeFileObservable = bindNodeCallback(fs.writeFile);

enum Behavior {ENFORCE, PUSH_UP, EXCLUDE}


interface IExtremalRules {
    path: string,
    behavior: Behavior;
}

interface INodeEntry {
    nodeName: string;
    absolutePath: string;
    relativePath: string;
    lstat: Stats
}

interface IDirectoryResult {
    typescriptFiles: INodeEntry[];
    subFolders: INodeEntry[];
}

function isValidTypeScriptFile(nodeEntry: INodeEntry) {
    return (nodeEntry.nodeName.endsWith(".ts") && !nodeEntry.nodeName.endsWith(".spec.ts") && nodeEntry.nodeName !== "index.ts");
}

async function generateBarrels(fullPath: string, extremalRules: IExtremalRules[] = [], currentPath: string = "", depth: number = 0): Promise<IDirectoryResult> {
    const extremalRule = find(extremalRules, rule => fullPath.startsWith(rule.path));
    const nodes = await readdirObservable(fullPath).toPromise();
    const nodeEntries = await forkJoin(nodes.map((node => lstatObservable(`${fullPath}/${node}`).pipe(map(lstat => ({
        nodeName: node,
        absolutePath: `${fullPath}/${node}`,
        relativePath: node,
        lstat: lstat
    } as INodeEntry)))))).toPromise() || [];
    const subFolders = nodeEntries.filter(node => node.lstat.isDirectory() && (!extremalRule || !(extremalRule && node.absolutePath.startsWith(extremalRule.path) && extremalRule.behavior === Behavior.EXCLUDE)));
    let typescriptFiles = nodeEntries.filter(node => isValidTypeScriptFile(node));
    for (let subFolder of subFolders) {
        const extremalRuleForSubfolder = find(extremalRules, rule => subFolder.absolutePath.startsWith(rule.path));
        const subFolderResult = await generateBarrels(subFolder.absolutePath, extremalRules, `${currentPath}/${subFolder.nodeName}` , depth + 1);
        if (subFolderResult.typescriptFiles.length < 2 || extremalRuleForSubfolder && extremalRuleForSubfolder.behavior == Behavior.PUSH_UP) {
            subFolderResult.typescriptFiles.forEach(x => {
                x.relativePath = `${subFolder.nodeName}/${x.relativePath}`
            });
            typescriptFiles.push(...subFolderResult.typescriptFiles);
        }
    }
    typescriptFiles = sortBy(typescriptFiles, file => file.nodeName);
    if (((!extremalRule && typescriptFiles.length >= 2) ||
        (extremalRule && extremalRule.behavior === Behavior.ENFORCE)) ||
        ((extremalRule && extremalRule.behavior !== Behavior.PUSH_UP) && extremalRule && extremalRule.behavior !== Behavior.EXCLUDE)
    ) {
        let barrelContent = `\n// Barrel file for ${fullPath}: Number of TS files: ${typescriptFiles.length}\n// Generated by ${os.userInfo().username}, ${new Date()}\n\n`;
        typescriptFiles.forEach(tsFile => {
            const nameWithNoExtension = tsFile.relativePath.substring(0,tsFile.relativePath.length - 3);
            barrelContent += `export * from '${nameWithNoExtension.startsWith('/') ? "." + nameWithNoExtension : './' + nameWithNoExtension}';\n`;
        });
        console.log(barrelContent);
        await writeFileObservable(`${fullPath}/index.ts`,barrelContent).toPromise();

        return Promise.resolve({subFolders, typescriptFiles: []})
    } else {
        return Promise.resolve({subFolders, typescriptFiles});
    }

}

const extremalRules: IExtremalRules[] = [
    {path: "Y:/dev/disqus-finder-ui/src/app/directives", behavior: Behavior.ENFORCE},
    {path: "Y:/dev/disqus-finder-ui/src/app/constants", behavior: Behavior.ENFORCE},
    {path: "Y:/dev/disqus-finder-ui/src/app/components/files", behavior: Behavior.PUSH_UP},
    {path: "Y:/dev/disqus-finder-ui/src/app/components/search", behavior: Behavior.PUSH_UP},
    {path: "Y:/dev/disqus-finder-ui/src/app/components/media", behavior: Behavior.PUSH_UP},
];

generateBarrels("Y:/dev/disqus-finder-ui/src/app", extremalRules);
